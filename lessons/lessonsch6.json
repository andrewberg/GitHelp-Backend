{
  "lesson": [
    {
      "title": "Working with Remotes",
      "body": "  To be able to collaborate on any Git project, you need to know how to manage your remote repositories. Remote repositories are versions of your project that are hosted on the Internet or network somewhere. You can have several of them, each of which generally is either read-only or read/write for you. Collaborating with others involves managing these remote repositories and pushing and pulling data to and from them when you need to share work. Managing remote repositories includes knowing how to add remote repositories, remove remotes that are no longer valid, manage various remote branches and define them as being tracked or not, and more. In this section, we’ll cover some of these remote-management skills./n "
    },
    {
      "title": "Showing Your Remotes",
      "body": " To see which remote servers you have configured, you can run the git remote command. It lists the shortnames of each remote handle you’ve specified. If you’ve cloned your repository, you should at least see origin — that is the default name Git gives to the server you cloned from: /n  $ git clone https://github.com/schacon/ticgit /n Cloning into 'ticgit'.../n remote: Reusing existing pack: 1857, done./n remote: Total 1857 (delta 0), reused 0 (delta 0)/n Receiving objects: 100% (1857/1857), 374.35 KiB | 268.00 KiB/s, done. /n Resolving deltas: 100% (772/772), done. /n Checking connectivity... done./n $ cd ticgit/n  $ git remote /norigin /n  You can also specify -v, which shows you the URLs that Git has stored for the shortname to be used when reading and writing to that remote: /n  $ git remote -v /n origin https://github.com/schacon/ticgit (fetch) /n origin  https://github.com/schacon/ticgit (push) /n  If you have more than one remote, the command lists them all. For example, a repository with multiple remotes for working with several collaborators might look something like this. /n  $ cd grit /n $ git remote -v /n bakkdoor  https://github.com/bakkdoor/grit (fetch) /n bakkdoor  https://github.com/bakkdoor/grit (push) /n cho45     https://github.com/cho45/grit (fetch)/n cho45     https://github.com/cho45/grit (push) /n defunkt   https://github.com/defunkt/grit (fetch) /n  defunkt   https://github.com/defunkt/grit (push) /n koke      git://github.com/koke/grit.git (fetch)/n koke      git://github.com/koke/grit.git (push) /n origin    git@github.com:mojombo/grit.git (fetch)/n origin    git@github.com:mojombo/grit.git (push) /n   This means we can pull contributions from any of these users pretty easily. We may additionally have permission to push to one or more of these, though we can’t tell that here./n  Notice that these remotes use a variety of protocols; we’ll cover more about this in Getting Git on a Server. /n"
    },
    {
      "title": "Adding Remote Repositories",
      "body": " We’ve mentioned and given some demonstrations of how the git clone command implicitly adds the origin remote for you. Here’s how to add a new remote explicitly. To add a new remote Git repository as a shortname you can reference easily, run git remote add <shortname> <url>:/n  $ git remote/n origin /n $ git remote add pb https://github.com/paulboone/ticgit /n $ git remote -v /n origin    https://github.com/schacon/ticgit (fetch) /n origin https://github.com/schacon/ticgit (push) /n  pb https://github.com/paulboone/ticgit (fetch) /n pb   https://github.com/paulboone/ticgit (push) /n  Now you can use the string pb on the command line in lieu of the whole URL. For example, if you want to fetch all the information that Paul has but that you don’t yet have in your repository, you can run git fetch pb: /n  $ git fetch pb /n  remote: Counting objects: 43, done./n  remote: Compressing objects: 100% (36/36), done. /n  remote: Total 43 (delta 10), reused 31 (delta 5) /n Unpacking objects: 100% (43/43), done. /n  From https://github.com/paulboone/ticgit /n  * [new branch]      master     -> pb/master /n  * [new branch]      ticgit     -> pb/ticgit /n  Paul’s master branch is now accessible locally as pb/master — you can merge it into one of your branches, or you can check out a local branch at that point if you want to inspect it. (We’ll go over what branches are and how to use them in much more detail in Git Branching.) /n"
    },
    {
      "title": "Fetching and Pulling from Your Remotes",
      "body": "  As you just saw, to get data from your remote projects, you can run:/n  $ git fetch <remote> /n  The command goes out to that remote project and pulls down all the data from that remote project that you don’t have yet. After you do this, you should have references to all the branches from that remote, which you can merge in or inspect at any time. /n  If you clone a repository, the command automatically adds that remote repository under the name “origin”. So, git fetch origin fetches any new work that has been pushed to that server since you cloned (or last fetched from) it. It’s important to note that the git fetch command only downloads the data to your local repository — it doesn’t automatically merge it with any of your work or modify what you’re currently working on. You have to merge it manually into your work when you’re ready. /n   If your current branch is set up to track a remote branch (see the next section and Git Branching for more information), you can use the git pull command to automatically fetch and then merge that remote branch into your current branch. This may be an easier or more comfortable workflow for you; and by default, the git clone command automatically sets up your local master branch to track the remote master branch (or whatever the default branch is called) on the server you cloned from. Running git pull generally fetches data from the server you originally cloned from and automatically tries to merge it into the code you’re currently working on. /n "
    },
    {
      "title": "Pushing to Your Remotes",
      "body": " When you have your project at a point that you want to share, you have to push it upstream. The command for this is simple: git push <remote> <branch>. If you want to push your master branch to your origin server (again, cloning generally sets up both of those names for you automatically), then you can run this to push any commits you’ve done back up to the server: /n   $ git push origin master /n  This command works only if you cloned from a server to which you have write access and if nobody has pushed in the meantime. If you and someone else clone at the same time and they push upstream and then you push upstream, your push will rightly be rejected. You’ll have to fetch their work first and incorporate it into yours before you’ll be allowed to push. See Git Branching for more detailed information on how to push to remote servers. /n"
    },
    {
      "title": "Inspecting a Remote",
      "body": " If you want to see more information about a particular remote, you can use the git remote show <remote> command. If you run this command with a particular shortname, such as origin, you get something like this: /n  $ git remote show origin/n * remote origin /n   Fetch URL: https://github.com/schacon/ticgit /n   Push  URL: https://github.com/schacon/ticgit /n   HEAD branch: master /n   Remote branches: /n     master                               tracked /n     dev-branch                           tracked /n   Local branch configured for 'git pull': /n     master merges with remote master /n   Local ref configured for 'git push': /n     master pushes to master (up to date) /n  This command shows which branch is automatically pushed to when you run git push while on certain branches. It also shows you which remote branches on the server you don’t yet have, which remote branches you have that have been removed from the server, and multiple local branches that are able to merge automatically with their remote-tracking branch when you run git pull. /n "
    },
    {
      "title": "Renaming and Removing Remotes",
      "body": "  You can run git remote rename to change a remote’s shortname. For instance, if you want to rename pb to paul, you can do so with git remote rename:/n  $ git remote rename pb paul /n $ git remote /n origin /n  paul /n  It’s worth mentioning that this changes all your remote-tracking branch names, too. What used to be referenced at pb/master is now at paul/master. /n  If you want to remove a remote for some reason — you’ve moved the server or are no longer using a particular mirror, or perhaps a contributor isn’t contributing anymore — you can either use git remote remove or git remote rm: /n  $ git remote remove paul /n $ git remote /n origin /n Once you delete the reference to a remote this way, all remote-tracking branches and configuration settings associated with that remote are also deleted. /n"
    }
  ]
}