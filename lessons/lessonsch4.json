{
  "lesson": [
    {
      "title": "Removing Files",
      "body": " To remove a file from Git, you have to remove it from your tracked files (more accurately, remove it from your staging area) and then commit. The git rm command does that, and also removes the file from your working directory so you don’t see it as an untracked file the next time around. /n  If you simply remove the file from your working directory, it shows up under the “Changed but not updated” (that is, unstaged) area of your git status output:/n $ rm PROJECTS.md/n $ git status/n On branch master/n Your branch is up-to-date with 'origin/master'./n Changes not staged for commit:/n   (use \"git add/rm <file>...\" to update what will be committed)/n(use \"git checkout -- <file>...\" to discard changes in working directory)/n         deleted:    PROJECTS.md/n no changes added to commit (use \"git add\" and/or \"git commit -a\")/n Then, if you run git rm, it stages the file’s removal:/n  $ git rm PROJECTS.md/n rm 'PROJECTS.md'/n $ git status/n On branch master/n Your branch is up-to-date with 'origin/master'./n Changes to be committed:/n   (use \"git reset HEAD <file>...\" to unstage)/n     deleted:    PROJECTS.md/n   The next time you commit, the file will be gone and no longer tracked. If you modified the file and added it to the staging area already, you must force the removal with the -f option. This is a safety feature to prevent accidental removal of data that hasn’t yet been recorded in a snapshot and that can’t be recovered from Git./n   Another useful thing you may want to do is to keep the file in your working tree but remove it from your staging area. In other words, you may want to keep the file on your hard drive but not have Git track it anymore. This is particularly useful if you forgot to add something to your .gitignore file and accidentally staged it, like a large log file or a bunch of .a compiled files. To do this, use the --cached option:/n $ git rm --cached README /n  You can pass files, directories, and file-glob patterns to the git rm command. That means you can do things such as: /n  $ git rm log/\\*.log/n   Note the backslash (\\) in front of the *. This is necessary because Git does its own filename expansion in addition to your shell’s filename expansion. This command removes all files that have the .log extension in the log/ directory. Or, you can do something like this:/n $ git rm \\*~ /n  This command removes all files whose names end with a ~. /n"
    },
    {
      "title": "Moving Files",
      "body": " Unlike many other VCS systems, Git doesn’t explicitly track file movement. If you rename a file in Git, no metadata is stored in Git that tells it you renamed the file. However, Git is pretty smart about figuring that out after the fact — we’ll deal with detecting file movement a bit later./n  Thus it’s a bit confusing that Git has a mv command. If you want to rename a file in Git, you can run something like:/n  $ git mv file_from file_to/n   and it works fine. In fact, if you run something like this and look at the status, you’ll see that Git considers it a renamed file:/n   $ git mv README.md README/n $ git status/n On branch master/n Your branch is up-to-date with 'origin/master'./n Changes to be committed:/n (use \"git reset HEAD <file>...\" to unstage)/n     renamed:    README.md -> README/n  However, this is equivalent to running something like this:/n  $ mv README.md README/n $ git rm README.md/n $ git add README /n   Git figures out that it’s a rename implicitly, so it doesn’t matter if you rename a file that way or with the mv command. The only real difference is that git mv is one command instead of three — it’s a convenience function. More importantly, you can use any tool you like to rename a file, and address the add/rm later, before you commit./n"
    },
    {
      "title": "Viewing the Commit History",
      "body": " After you have created several commits, or if you have cloned a repository with an existing commit history, you’ll probably want to look back to see what has happened. The most basic and powerful tool to do this is the git log command. /n   These examples use a very simple project called “simplegit”. To get the project, run/n   $ git clone https://github.com/schacon/simplegit-progit/n   When you run git log in this project, you should get output that looks something like this:/n   $ git log/n commit ca82a6dff817ec66f44342007202690a93763949/n Author: Scott Chacon <schacon@gee-mail.com> /n  Date:   Mon Mar 17 21:52:11 2008 -0700 /n      changed the version number /n  commit 085bb3bcb608e1e8451d4b2432f8ecbe6306e7e7/n Author: Scott Chacon <schacon@gee-mail.com> /n Date:   Sat Mar 15 16:40:33 2008 -0700/n     removed unnecessary test /n   commit a11bef06a3f659402fe7563abf99ad00de2209e6 /n Author: Scott Chacon <schacon@gee-mail.com>/n Date:   Sat Mar 15 10:31:28 2008 -0700/n     first commit/n   By default, with no arguments, git log lists the commits made in that repository in reverse chronological order — that is, the most recent commits show up first. As you can see, this command lists each commit with its SHA-1 checksum, the author’s name and email, the date written, and the commit message./n "
    },
    {
      "title": "Git Log options",
      "body": "  A huge number and variety of options to the git log command are available to show you exactly what you’re looking for. Here, we’ll show you some of the most popular./n   One of the more helpful options is -p or --patch, which shows the difference (the patch output) introduced in each commit. You can also limit the number of log entries displayed, such as using -2 to show only the last two entries./n   $ git log -p -2/n commit ca82a6dff817ec66f44342007202690a93763949 /n  Author: Scott Chacon <schacon@gee-mail.com>/n  Date:   Mon Mar 17 21:52:11 2008 -0700 /n     changed the version number/n  diff --git a/Rakefile b/Rakefile /n  index a874b73..8f94139 100644 /n  --- a/Rakefile /n  +++ b/Rakefile /n  @@ -5,7 +5,7 @@ require 'rake/gempackagetask'/n  spec = Gem::Specification.new do |s|/n      s.platform  =   Gem::Platform::RUBY/n      s.name      =   \"simplegit\"/n -    s.version   =   \"0.1.0\"/n +    s.version   =   \"0.1.1\" /n      s.author    =   \"Scott Chacon\"/n      s.email     =   \"schacon@gee-mail.com\" /n      s.summary   =   \"A simple gem for using Git in Ruby code.\" /n commit 085bb3bcb608e1e8451d4b2432f8ecbe6306e7e7/n  Author: Scott Chacon <schacon@gee-mail.com> /n  Date:   Sat Mar 15 16:40:33 2008 -0700 /n     removed unnecessary test /n diff --git a/lib/simplegit.rb b/lib/simplegit.rb /n index a0a60ae..47c6340 100644 /n  --- a/lib/simplegit.rb /n  +++ b/lib/simplegit.rb /n @@ -18,8 +18,3 @@ class SimpleGit/n      end /n  end/n - /n   -if $0 == __FILE__ /n  -  git = SimpleGit.new /n  -  puts git.show /n  -end/n   This option displays the same information but with a diff directly following each entry. This is very helpful for code review or to quickly browse what happened during a series of commits that a collaborator has added. You can also use a series of summarizing options with git log. For example, if you want to see some abbreviated stats for each commit, you can use the --stat option: /n   $ git log --stat/n commit ca82a6dff817ec66f44342007202690a93763949 /n Author: Scott Chacon &lt;schacon@gee-mail.com&gt;/n Date:   Mon Mar 17 21:52:11 2008 -0700/n     changed the version number /n  Rakefile | 2 +- /n  1 file changed, 1 insertion(+), 1 deletion(-) /n commit 085bb3bcb608e1e8451d4b2432f8ecbe6306e7e7 /n Author: Scott Chacon &lt;schacon@gee-mail.com&gt; /n  Date:   Sat Mar 15 16:40:33 2008 -0700 /n     removed unnecessary test /n  lib/simplegit.rb | 5 ----- /n  1 file changed, 5 deletions(-) /n  commit a11bef06a3f659402fe7563abf99ad00de2209e6 /n  Author: Scott Chacon &lt;schacon@gee-mail.com&gt;/n Date:   Sat Mar 15 10:31:28 2008 -0700 /n     first commit /n  README           |  6 ++++++ /n  Rakefile         | 23 +++++++++++++++++++++++ /n  lib/simplegit.rb | 25 +++++++++++++++++++++++++ /n  3 files changed, 54 insertions(+)/n As you can see, the --stat option prints below each commit entry a list of modified files, how many files were changed, and how many lines in those files were added and removed. It also puts a summary of the information at the end. /n   Another really useful option is --pretty. This option changes the log output to formats other than the default. A few prebuilt options are available for you to use. The oneline option prints each commit on a single line, which is useful if you’re looking at a lot of commits. In addition, the short, full, and fuller options show the output in roughly the same format but with less or more information, respectively:/n   $ git log --pretty=oneline /n ca82a6dff817ec66f44342007202690a93763949 changed the version number /n  085bb3bcb608e1e8451d4b2432f8ecbe6306e7e7 removed unnecessary test /n  a11bef06a3f659402fe7563abf99ad00de2209e6 first commit/n   The most interesting option is format, which allows you to specify your own log output format. This is especially useful when you’re generating output for machine parsing — because you specify the format explicitly, you know it won’t change with updates to Git: /n   $ git log --pretty=format:\"%h - %an, %ar : %s\"/n  ca82a6d - Scott Chacon, 6 years ago : changed the version number /n  085bb3b - Scott Chacon, 6 years ago : removed unnecessary test /n  a11bef0 - Scott Chacon, 6 years ago : first commit/n"
    },
    {
      "title": "More Git log options",
      "body": " The oneline and format options are particularly useful with another log option called --graph. This option adds a nice little ASCII graph showing your branch and merge history: /n  $ git log --pretty=format:\"%h %s\" --graph /n * 2d3acf9 ignore errors from SIGCHLD on trap /n *  5e3ee11 Merge branch 'master' of git://github.com/dustin/grit/n |\\/n | * 420eac9 Added a method for getting the current branch./n * | 30e367c timeout code and tests/n * | 5a09431 add timeout protection to grit/n * | e1193f8 support for heads with slashes in them/n |/ /n * d6016bc require time for xmlschema /n *  11d191e Merge branch 'defunkt' into local /n  This type of output will become more interesting as we go through branching and merging in the chapter on branching./n  Those are only some simple output-formatting options to git log — there are many more./n"
    },
    {
      "title": "Limiting Log Output",
      "body": " In addition to output-formatting options, git log takes a number of useful limiting options — that is, options that let you show only a subset of commits. You’ve seen one such option already — the -2 option, which displays only the last two commits. In fact, you can do -<n>, where n is any integer to show the last n commits. In reality, you’re unlikely to use that often, because Git by default pipes all output through a pager so you see only one page of log output at a time. /n   However, the time-limiting options such as --since and --until are very useful. For example, this command gets the list of commits made in the last two weeks:/n  $ git log --since=2.weeks /n  This command works with lots of formats — you can specify a specific date like \"2008-01-15\", or a relative date such as \"2 years 1 day 3 minutes ago\". /n  You can also filter the list to commits that match some search criteria. The --author option allows you to filter on a specific author, and the --grep option lets you search for keywords in the commit messages./n  Another really helpful filter is the -S option (colloquially referred to as Git’s “pickaxe” option), which takes a string and shows only those commits that changed the number of occurrences of that string. For instance, if you wanted to find the last commit that added or removed a reference to a specific function, you could call: /n  $ git log -S function_name /n  The last really useful option to pass to git log as a filter is a path. If you specify a directory or file name, you can limit the log output to commits that introduced a change to those files. This is always the last option and is generally preceded by double dashes (--) to separate the paths from the options. /n "
    }
  ]
}
