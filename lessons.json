
[{"title":"Gitting Started","body": "<p>Why use Git? Git keeps track of different versions of your program. When you commit, or save your project, it takes a snapshot of all the files in your project at that moment and stores a reference to the snapshot. If a file has not changed in a commit then Git will not keep a second copy but instead will include a link to the previous identical file that is already stored.</p>" }, 
{"title":"Three States of Git", "body":"<p> Git is composed of three states that files can exist in: committed, modified and staged. When a file has been committed data has been safely stored in the local database. Modified means that the file has been changed but not committed yet. Staged means that a modified file has been marked to go into the next commit snapshot.</p>" "<p> Next we will discuss the three main parts of a Git project: the Git directory, the working tree, and the staging area. </p>" 
"<p> The Git directory consists of the metadata and object database for the project. It is copied when you clone a repository. </p>" "<p> The working tree is a single checkout of one version of the project. These files are pulled out of the compressed database in the Git directory and placed on your local disk to be used or modified. </p>"  "<p> The staging area is a file, generally contained in your Git directory, that stores information on what will go into your next commit. It is also known as the 'index'. </p>"}, {"title":"Using the command line", "body":"<p> This tutorial will use the command line to practice git commands. For installing on Linux, Mac or Windows please visit:https://git-scm.com/book/en/v2/Getting-Started-Installing-Git </p>"}, 

{"title":"Git configuration" , "body":"<p></p>"},

{"title":"Git Help", "body":"<p>When you need help with a certain Git command, to view the man page use: </p><p> $ git help <verb> </p> <p> $ git <verb> --help </p> " "<p> $ man git-<verb> </p>"},
{"title":"Git Basics", "body":"<p> </p> <p> </p>"}, {"title":"Getting a Git Repository", "body":"<p> First start by initializing a Repository in an Existing Directory. To do this start by switching directories to the project you want to control with Git.</p> <p> for Linux: </p> <p> $ cd /home/user/my_project </p> <p> for Mac: </p> <p>$ cd /Users/user/my_project</p> <p>for Windows: </p><p>$ cd /c/user/my_project</p><p> then type: </p> <p>$ git init</p> <p> This creates a new subdirectory named .git that contains all of your necessary repository files - a Git repository skeleton. To start version-controlling existing files use the following:</p><p>$ git add *.c</p><p>$ git add LICENSE</p><p>$ git commit -m 'initial project version' </p>""<p>Cloning an Existing Repository</p>" "<p>To clone an existing git repository, use: git clone <url> For example to clone the Git linkable library, libgit2 you could use: </p><p>$ git clone https://github.com/libgit2/libgit2</p> <p>This creates a directory named libgit2, initializes a .git directory inside it, pulls down all the data for that repository, and checks out a working copy of the latest version. </p> <p> To clone a repository into a directory named something other than libgit2, try: </p><p>git clone https://github.com/libgit2/libgit2 mylibgit</p><p> This does the same thing as the previous command but the target directory is called mylibgit</p>"},   
] 
