[{"title":"Gitting Started","body": "<p>Why use Git? Git like other Version Control Systems (VCS) keeps track of different versions of your program. Unlike other VCS' when you commit, or save your project, Git takes a snapshot of all the files in your project at that moment and stores a reference to the snapshot. If a file has not changed in a commit then Git will not keep a second copy but instead will include a link to the previous identical file that is already stored.</p>" }, 
{"title":"Three States of Git", "body":"<p> Git is composed of three states that files can exist in: committed, modified and staged. When a file has been committed data has been safely stored in the local database. Modified means that the file has been changed but not committed yet. Staged means that a modified file has been marked to go into the next commit snapshot.</p>"},{"title":"Three main parts of Git", "body":"<p> Next we will discuss the three main parts of a Git project: the Git directory, the working tree, and the staging area. </p>" 
"<p> The Git directory consists of the metadata and object database for the project. It is copied when you clone a repository. </p>" "<p> The working tree is a single checkout of one version of the project. These files are pulled out of the compressed database in the Git directory and placed on your local disk to be used or modified. </p>"  "<p> The staging area is a file, generally contained in your Git directory, that stores information on what will go into your next commit. It is also known as the 'index'. </p>"}, {"title":"Using the command line", "body":"<p> This tutorial will use the command line to practice git commands. You will need to install Git tools on your OS. Please choose your OS below for installing instructions: </p>"}, 
{"title":"Installing on Linux", "body":"<p> If you want to install the basic Git tools on Linux via a binary installer, you can generally do so through the basic package-management tool that comes with your distribution. If you’re on Fedora for example (or any closely-related RPM-based distro such as RHEL or CentOS), you can use dnf: </p><p> $ sudo dnf install git-all<p> <p>If you’re on a Debian-based distribution like Ubuntu, try apt-get: </p> <p>$ sudo apt-get install git-all </p> <p> or more options, there are instructions for installing on several different Unix flavors on the Git website, at http://git-scm.com/download/linux. </p>"},
{"title":"Installing on Mac", "body":"<p> There are several ways to install Git on a Mac. The easiest is probably to install the Xcode Command Line Tools. On Mavericks (10.9) or above you can do this simply by trying to run git from the Terminal the very first time. If you don’t have it installed already, it will prompt you to install it.</p> <p>If you want a more up to date version, you can also install it via a binary installer. A macOS Git installer is maintained and available for download at the Git website, at http://git-scm.com/download/mac.</p> <p>You can also install it as part of the GitHub for Mac install. Their GUI Git tool has an option to install command line tools as well. You can download that tool from the GitHub for Mac website, at http://mac.github.com.</p>"},
{"title":"Installing on Windows", "body":"<p>There are also a few ways to install Git on Windows. The most official build is available for download on the Git website. Just go to http://git-scm.com/download/win and the download will start automatically. Note that this is a project called Git for Windows, which is separate from Git itself; for more information on it, go to https://git-for-windows.github.io/.</p> <p>To get an automated installation you can use the Git Chocolatey package. Note that the Chocolatey package is community maintained. </p> <p>Another easy way to get Git installed is by installing GitHub for Windows. The installer includes a command line version of Git as well as the GUI. It also works well with Powershell, and sets up solid credential caching and sane CRLF settings. We’ll learn more about those things a little later, but suffice it to say they’re things you want. You can download this from the GitHub for Windows website, at http://windows.github.com.</p>"},

{"title":"Git configuration" , "body":"<p> Now that you have Git on your system, you’ll want to do a few things to customize your Git environment. You should have to do these things only once on any given computer; they’ll stick around between upgrades. You can also change them at any time by running through the commands again.</p> <p> Git comes with a tool called git config that lets you get and set configuration variables that control all aspects of how Git looks and operates. These variables can be stored in three different places:</p> <p>1./etc/gitconfig file: Contains values applied to every user on the system and all their repositories. If you pass the option --system to git config, it reads and writes from this file specifically. (Because this is a system configuration file, you would need administrative or superuser privilege to make changes to it.) </p> <p>2. ~/.gitconfig or ~/.config/git/config file: Values specific personally to you, the user. You can make Git read and write to this file specifically by passing the --global option. </p> <p>3. config file in the Git directory (that is, .git/config) of whatever repository you’re currently using: Specific to that single repository.</p> <p> Each level overrides values in the previous level, so values in .git/config trump those in /etc/gitconfig.</p> <p>On Windows systems, Git looks for the .gitconfig file in the $HOME directory (C:\\Users\\$USER for most people). It also still looks for /etc/gitconfig, although it’s relative to the MSys root, which is wherever you decide to install Git on your Windows system when you run the installer. If you are using version 2.x or later of Git for Windows, there is also a system-level config file at C:\\Documents and Settings\\All Users\\Application Data\\Git\\config on Windows XP, and in C:\\ProgramData\\Git\\config on Windows Vista and newer. This config file can only be changed by git config -f <file> as an admin. </p>"},
{"title":"Your identity", "body":"<p>The first thing you should do when you install Git is to set your user name and email address. This is important because every Git commit uses this information, and it’s immutably baked into the commits you start creating:</p><p>$ git config --global user.name \"John Doe\"</p> <p>$ git config --global user.email johndoe@example.com</p> <p>Again, you need to do this only once if you pass the --global option, because then Git will always use that information for anything you do on that system. If you want to override this with a different name or email address for specific projects, you can run the command without the --global option when you’re in that project.</p> <p>Many of the GUI tools will help you do this when you first run them.</p>" }
{"title":"Git Help", "body":"<p>When you need help with a certain Git command, to view the man page use: </p><p> $ git help <verb> </p> <p> $ git <verb> --help </p> " "<p> $ man git-<verb> </p>"},
{"title":"Your Editor","body":"<p>Now that your identity is set up, you can configure the default text editor that will be used when Git needs you to type in a message. If not configured, Git uses your system’s default editor.</p><p>If you want to use a different text editor, such as Emacs, you can do the following:</p> <p> $ On a Windows system, if you want to use a different text editor, you must specify the full path to its executable file. This can be different depending on how your editor is packaged.it config --global core.editor emacs</p>"}]
